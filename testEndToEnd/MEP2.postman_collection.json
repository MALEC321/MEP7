{
	"info": {
		"_postman_id": "ee957608-d354-46d7-bf69-717dd6ac33fa",
		"name": "MEP2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Exception Resources & Dino",
			"item": [
				{
					"name": "Resources Negative",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resource - Add - Negative Burger",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.error).to.be.a(\"string\");",
											"  pm.expect(jsonData.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Should return expected error\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"INVALID_RESOURCE_QUANTITY\");",
											"    pm.expect(jsonData.description).to.eql(\"Resource quantities must be positive.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"qtyBurger\": 20,\n  \"qtySalad\": 30,\n  \"qtyWater\": -10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resources - Get - Should be empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"// Le burger n’a pas encore été ajouté puisque le tour ne s’est pas exécuté!",
											"pm.test(\"Empty quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resources - Get - Should Default Values added",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Empty quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(250);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(10000);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dinosaur Duplicate Name",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test\",\n  \"weight\": 100,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.name).to.be.a(\"string\");",
											"  pm.expect(jsonData.weight).to.be.a(\"number\");",
											"  pm.expect(jsonData.gender).to.be.a(\"string\");",
											"  pm.expect(jsonData.species).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Dinosaur match\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Dino Test\");",
											"    pm.expect(jsonData.weight).to.eql(100);",
											"    pm.expect(jsonData.gender).to.eql(\"f\");",
											"    pm.expect(jsonData.species).to.eql(\"Triceratops\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "Dino Test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Duplicate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.error).to.be.a(\"string\");",
											"  pm.expect(jsonData.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Should return expected error\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"DUPLICATE_NAME\");",
											"    pm.expect(jsonData.description).to.eql(\"The specified name already exists and must be unique.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test\",\n  \"weight\": 100,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dinosaur Invalid Gender",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.error).to.be.a(\"string\");",
											"  pm.expect(jsonData.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Should return expected error\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"INVALID_GENDER\");",
											"    pm.expect(jsonData.description).to.eql(\"The specified gender must be \\\"m\\\" or \\\"f\\\".\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test\",\n  \"weight\": 100,\n  \"gender\": \"invalid\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dinosaur Invalid Weight",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.error).to.be.a(\"string\");",
											"  pm.expect(jsonData.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Should return expected error\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"INVALID_WEIGHT\");",
											"    pm.expect(jsonData.description).to.eql(\"The specified weight must be greater than 0.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test\",\n  \"weight\": -1,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dinosaur Invalid Species",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur No species",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.error).to.be.a(\"string\");",
											"  pm.expect(jsonData.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Should return expected error\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"INVALID_SPECIES\");",
											"    pm.expect(jsonData.description).to.eql(\"The specified species is not supported.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test\",\n  \"weight\": 100,\n  \"gender\": \"f\",\n  \"species\": \"invalid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dinosaur Not Found",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.error).to.be.a(\"string\");",
											"  pm.expect(jsonData.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Should return expected error\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"NON_EXISTENT_NAME\");",
											"    pm.expect(jsonData.description).to.eql(\"The specified name does not exist.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "Dino Test"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Reset Game",
			"item": [
				{
					"name": "Reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8181/reset",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8181",
							"path": [
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Turn 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
									"});",
									"",
									"pm.test(\"turnNumber equals to 1\", function () {",
									"    pm.expect(jsonData.turnNumber).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8181/turn",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8181",
							"path": [
								"turn"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Empty quantities\", function () {\r",
									"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);\r",
									"    pm.expect(jsonData.fresh.qtySalad).to.eql(250);\r",
									"    pm.expect(jsonData.fresh.qtyWater).to.eql(10000);\r",
									"\r",
									"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);\r",
									"    pm.expect(jsonData.expired.qtySalad).to.eql(0);\r",
									"    pm.expect(jsonData.expired.qtyWater).to.eql(0);\r",
									"    \r",
									"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);\r",
									"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);\r",
									"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8181/resources/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8181",
							"path": [
								"resources",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dinosaur List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Dinosaur quantity match\", function () {",
									"    pm.expect(jsonData.length).to.eql(0);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://localhost:8181/dinosaurs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8181",
							"path": [
								"dinosaurs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"qtyBurger\": 1,\r\n  \"qtySalad\": 1,\r\n  \"qtyWater\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8181/resources/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8181",
							"path": [
								"resources",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"qtyBurger\": 2,\r\n  \"qtySalad\": 2,\r\n  \"qtyWater\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8181/resources/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8181",
							"path": [
								"resources",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"qtyBurger\": 3,\r\n  \"qtySalad\": 3,\r\n  \"qtyWater\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8181/resources/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8181",
							"path": [
								"resources",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Dinosaur",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Dino Test\",\n  \"weight\": 1000,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8181/dinosaurs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8181",
							"path": [
								"dinosaurs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another Dinosaur",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Dino Test\",\n  \"weight\": 1000,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8181/dinosaurs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8181",
							"path": [
								"dinosaurs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another Dinosaur",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Dino Test\",\n  \"weight\": 1000,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8181/dinosaurs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8181",
							"path": [
								"dinosaurs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8181/reset",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8181",
							"path": [
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Turn 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
									"});",
									"",
									"pm.test(\"turnNumber equals to 1\", function () {",
									"    pm.expect(jsonData.turnNumber).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8181/turn",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8181",
							"path": [
								"turn"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Resources Recheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"CookIt quantities\", function () {\r",
									"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);\r",
									"    pm.expect(jsonData.fresh.qtySalad).to.eql(250);\r",
									"    pm.expect(jsonData.fresh.qtyWater).to.eql(10000);\r",
									"\r",
									"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);\r",
									"    pm.expect(jsonData.expired.qtySalad).to.eql(0);\r",
									"    pm.expect(jsonData.expired.qtyWater).to.eql(0);\r",
									"\r",
									"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);\r",
									"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);\r",
									"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8181/resources/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8181",
							"path": [
								"resources",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dinosaur List Recheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Dinosaur quantity empty\", function () {",
									"    pm.expect(jsonData.length).to.eql(0);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://localhost:8181/dinosaurs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8181",
							"path": [
								"dinosaurs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Example Resources & Dino",
			"item": [
				{
					"name": "Example Res Added & Expired",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"qtyBurger\": 5,\n  \"qtySalad\": 10,\n  \"qtyWater\": 150\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources, but Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"// Le burger n’a pas encore été ajouté puisque le tour ne s’est pas exécuté!",
											"pm.test(\"Empty quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(105);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(260);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(10150);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Salad Expired Turn 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(405);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(750);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(40150);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(260);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(5);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Burger Expired Turn 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(400);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(750);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(50150);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(105);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(510);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(6);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Expired Turn 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(400);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(750);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(60150);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(205);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(760);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(7);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Expired Turn 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(400);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(750);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(70150);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(305);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(1010);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(8);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Expired Turn 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(400);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(750);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(80150);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(405);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(1260);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 9",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(9);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Expired Turn 9",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(400);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(750);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(90150);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(505);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(1510);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(10);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Expired Turn 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(400);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(750);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(100150);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(605);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(1760);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 11",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(11);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Water Expired Turn 11",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(400);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(750);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(100000);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(705);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(2010);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(10150);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Example Resources + Dino",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Resources 1 Burger",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"qtyBurger\": 1,\n  \"qtySalad\": 0,\n  \"qtyWater\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"// Le burger n’a pas encore été ajouté puisque le tour ne s’est pas exécuté!",
											"pm.test(\"Empty quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Added",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(101);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(250);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(10000);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(5);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Expired",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(400);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(750);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(50000);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(101);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(500);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Big Dinosaur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Heavy\",\n  \"weight\": 9999999,\n  \"gender\": \"m\",\n  \"species\": \"Spinosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 6\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(6);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(0);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Expired 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(750);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(201);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(750);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(400);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(60000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Smaller Dino, Eat Less",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Herbivore\",\n  \"weight\": 8000,\n  \"gender\": \"m\",\n  \"species\": \"Brachiosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 7\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(7);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Expired 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(710);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(400);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(201);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(1000);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(400);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(40);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(69600);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 8\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(8);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Expired 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(200);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(730);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(5600);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(201);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(1210);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(400);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(60);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(74400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 9",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 8\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(9);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Expired 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(300);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(730);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(10800);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(201);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(1440);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(400);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(80);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(79200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 8\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(10);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Expired 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(400);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(730);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(16000);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(201);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(1670);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(400);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(100);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(84000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 11",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 8\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(11);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Expired 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(400);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(730);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(21200);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(301);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(1900);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(400);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(120);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(88800);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Example Small Dino Eat & Live",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test\",\n  \"weight\": 1,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources CookIt Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(250);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(10000);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.name).to.be.a(\"string\");",
											"  pm.expect(jsonData.weight).to.be.a(\"number\");",
											"  pm.expect(jsonData.gender).to.be.a(\"string\");",
											"  pm.expect(jsonData.species).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Dinosaur match\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Dino Test\");",
											"    pm.expect(jsonData.weight).to.eql(1);",
											"    pm.expect(jsonData.gender).to.eql(\"f\");",
											"    pm.expect(jsonData.species).to.eql(\"Triceratops\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "Dino Test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources, Dino should Eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"//First turn Dino eats double",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(200);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(499);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(19998);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(1);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Dino eat Second Time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"//Second turn Dino eats normal",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(300);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(748);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(29997);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(2);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Example Big Dino Eat & Live",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test\",\n  \"weight\": 1000,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(250);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(10000);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.name).to.be.a(\"string\");",
											"  pm.expect(jsonData.weight).to.be.a(\"number\");",
											"  pm.expect(jsonData.gender).to.be.a(\"string\");",
											"  pm.expect(jsonData.species).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Dinosaur match\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Dino Test\");",
											"    pm.expect(jsonData.weight).to.eql(1000);",
											"    pm.expect(jsonData.gender).to.eql(\"f\");",
											"    pm.expect(jsonData.species).to.eql(\"Triceratops\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "Dino Test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resources - Get - Check if Dino consumed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"//First turn Dino eats double",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(200);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(495);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(18800);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(5);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(1200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resources - Get - Check if Dino consumed 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"//Second turn Dino eats normal",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(300);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(742);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(28200);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(8);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(1800);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Example Dino Die",
			"item": [
				{
					"name": "2 Big Dinosaures eat All & both die",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources CookIt Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(250);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(10000);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Heavy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Heavy\",\n  \"weight\": 9999999,\n  \"gender\": \"m\",\n  \"species\": \"Spinosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Heavy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Heavy 2\",\n  \"weight\": 9999999,\n  \"gender\": \"m\",\n  \"species\": \"Spinosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Consumed 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"//First turn Dino eats double",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(500);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(200);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(20000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources Consumed 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"//Second turn Dino eats normal",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(750);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(10000);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(200);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(20000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Big Dino Eat & Small Dino die",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources CookIt Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(250);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(10000);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Herbivore",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Herbivore\",\n  \"weight\": 100,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Tyrannosaurus Rex",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino TRex\",\n  \"weight\": 10000,\n  \"gender\": \"m\",\n  \"species\": \"Tyrannosaurus Rex\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Velociraptor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Velociraptor\",\n  \"weight\": 10000,\n  \"gender\": \"m\",\n  \"species\": \"Velociraptor\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources, some Consumed 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"//First turn Dino eats double",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(160);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(499);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(40);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(1);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(20000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources, some Consumed 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"//Second turn Dino eats normal",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(250);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(749);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(4000);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(50);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(1);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(26000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Example Dino Valid + Invalid",
			"item": [
				{
					"name": "All Dino Species & 1 Invalid",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resources - Get - Default Values after 1 turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(250);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(10000);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Ankylosaurus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Herbivore1\",\n  \"weight\": 1,\n  \"gender\": \"f\",\n  \"species\": \"Ankylosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Brachiosaurus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Herbivore2\",\n  \"weight\": 1,\n  \"gender\": \"f\",\n  \"species\": \"Brachiosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Diplodocus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Herbivore3\",\n  \"weight\": 1,\n  \"gender\": \"f\",\n  \"species\": \"Diplodocus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Stegosaurus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Herbivore\",\n  \"weight\": 1,\n  \"gender\": \"f\",\n  \"species\": \"Stegosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Triceratops",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Herbivore5\",\n  \"weight\": 1,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Allosaurus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Carnivore1\",\n  \"weight\": 1,\n  \"gender\": \"m\",\n  \"species\": \"Allosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Megalosaurus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Carnivore2\",\n  \"weight\": 1,\n  \"gender\": \"m\",\n  \"species\": \"Megalosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Spinosaurus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Carnivore3\",\n  \"weight\": 1,\n  \"gender\": \"m\",\n  \"species\": \"Spinosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Tyrannosaurus Rex",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Carnivore4\",\n  \"weight\": 1,\n  \"gender\": \"m\",\n  \"species\": \"Tyrannosaurus Rex\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Velociraptor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Carnivore5\",\n  \"weight\": 1,\n  \"gender\": \"m\",\n  \"species\": \"Velociraptor\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Invalid Species",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Invalid Species\",\n  \"weight\": 1,\n  \"gender\": \"m\",\n  \"species\": \"invalid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(10);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resources - Get - Check if Dino consumed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"//First turn Dino eats double",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(195);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(495);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(19980);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(5);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(5);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(20);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resources - Get - Check if Dino consumed 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"//Second turn Dino eats normal",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(290);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(740);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(29970);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(10);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(10);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(30);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2 Dinosaurs Gender & 1 Invalid",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Rersources CookIt Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(250);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(10000);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Herbivore",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Herbivore\",\n  \"weight\": 1000,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Tyrannosaurus Rex",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Carnivore\",\n  \"weight\": 1000,\n  \"gender\": \"m\",\n  \"species\": \"Tyrannosaurus Rex\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Invalid Gender",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Invalid\",\n  \"weight\": 5000,\n  \"gender\": \"invalid\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources, some Consumed 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"//First turn Dino eats double",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(198);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(495);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(17600);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(2);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(5);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(2400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources, some Consumed 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"//Second turn Dino eats normal",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(297);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(742);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(26400);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(3);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(8);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(3600);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2 Dinosaurs & 1 duplicate name",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources CookIt Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(250);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(10000);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Herbivore",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Herbivore\",\n  \"weight\": 1000,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Tyrannosaurus Rex",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Carnivore\",\n  \"weight\": 1000,\n  \"gender\": \"m\",\n  \"species\": \"Tyrannosaurus Rex\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Duplicated name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Carnivore\",\n  \"weight\": 5000,\n  \"gender\": \"m\",\n  \"species\": \"Velociraptor\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources, some Consumed 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"//First turn Dino eats double",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(198);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(495);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(17600);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(2);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(5);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(2400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources, some Consumed 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"//Second turn Dino eats normal",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(297);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(742);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(26400);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(3);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(8);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(3600);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Duplicate name, same Turn",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test\",\n  \"weight\": 100,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Duplicate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test\",\n  \"weight\": 10000,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}