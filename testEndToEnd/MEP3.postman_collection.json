{
	"info": {
		"_postman_id": "c1467f49-ab65-4273-94ab-f2fd562a5461",
		"name": "MEP3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Exception Bebe",
			"item": [
				{
					"name": "Bebe Duplicate name",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Mother",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Mother\",\n  \"weight\": 5,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Father",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Father\",\n  \"weight\": 5,\n  \"gender\": \"m\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Bebe\",\n  \"fatherName\": \"Dino Test Father\",\n  \"motherName\": \"Dino Test Mother\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/breed",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"breed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.name).to.be.a(\"string\");",
											"  pm.expect(jsonData.weight).to.be.a(\"number\");",
											"  pm.expect(jsonData.gender).to.be.a(\"string\");",
											"  pm.expect(jsonData.species).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Dinosaur match\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Dino Test Bebe\");",
											"    pm.expect(jsonData.weight).to.eql(1);",
											"    pm.expect(jsonData.gender).to.be.oneOf([\"f\",\"m\"]);",
											"    pm.expect(jsonData.species).to.eql(\"Triceratops\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "Dino Test Bebe"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bebe Duplicate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.error).to.be.a(\"string\");",
											"  pm.expect(jsonData.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Should return expected error\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"DUPLICATE_NAME\");",
											"    pm.expect(jsonData.description).to.eql(\"The specified name already exists and must be unique.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Bebe\",\n  \"fatherName\": \"Dino Test Father\",\n  \"motherName\": \"Dino Test Mother\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/breed",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"breed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Parent Not Found",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Mother",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Mother\",\n  \"weight\": 5,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur Mother",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.name).to.be.a(\"string\");",
											"  pm.expect(jsonData.weight).to.be.a(\"number\");",
											"  pm.expect(jsonData.gender).to.be.a(\"string\");",
											"  pm.expect(jsonData.species).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Dinosaur match\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Dino Test Mother\");",
											"    pm.expect(jsonData.weight).to.eql(5);",
											"    pm.expect(jsonData.gender).to.eql(\"f\");",
											"    pm.expect(jsonData.species).to.eql(\"Triceratops\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "Dino Test Mother"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bebe, but Invalid Father",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.error).to.be.a(\"string\");",
											"  pm.expect(jsonData.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Should return expected error\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"NON_EXISTENT_NAME\");",
											"    pm.expect(jsonData.description).to.eql(\"The specified name does not exist.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Bebe\",\n  \"fatherName\": \"invalid\",\n  \"motherName\": \"Dino Test Mother\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/breed",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"breed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Father",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Father\",\n  \"weight\": 5,\n  \"gender\": \"m\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bebe, but Invalid Mother",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.error).to.be.a(\"string\");",
											"  pm.expect(jsonData.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Should return expected error\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"NON_EXISTENT_NAME\");",
											"    pm.expect(jsonData.description).to.eql(\"The specified name does not exist.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Bebe\",\n  \"fatherName\": \"Dino Test Father\",\n  \"motherName\": \"invalid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/breed",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"breed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Parent Invalid Father",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Mother",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Mother\",\n  \"weight\": 5,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur SheMale",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Father\",\n  \"weight\": 5,\n  \"gender\": \"f\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bebe, but Invalid Father",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.error).to.be.a(\"string\");",
											"  pm.expect(jsonData.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Should return expected error\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"INVALID_FATHER\");",
											"    pm.expect(jsonData.description).to.eql(\"Father must be a male.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Bebe\",\n  \"fatherName\": \"Dino Test Father\",\n  \"motherName\": \"Dino Test Mother\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/breed",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"breed"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Parent Invalid Mother",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Father",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Father\",\n  \"weight\": 5,\n  \"gender\": \"m\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur SheMale",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Mother\",\n  \"weight\": 5,\n  \"gender\": \"m\",\n  \"species\": \"Triceratops\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bebe, but Invalid Mother",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.error).to.be.a(\"string\");",
											"  pm.expect(jsonData.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Should return expected error\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"INVALID_MOTHER\");",
											"    pm.expect(jsonData.description).to.eql(\"Mother must be a female.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Bebe\",\n  \"fatherName\": \"Dino Test Father\",\n  \"motherName\": \"Dino Test Mother\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/breed",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"breed"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Example Bebe Live",
			"item": [
				{
					"name": "Example Bebe Live",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Mother",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Mother\",\n  \"weight\": 500,\n  \"gender\": \"f\",\n  \"species\": \"Ankylosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Father",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Father\",\n  \"weight\": 500,\n  \"gender\": \"m\",\n  \"species\": \"Ankylosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Bebe\",\n  \"fatherName\": \"Dino Test Father\",\n  \"motherName\": \"Dino Test Mother\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/breed",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"breed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(244);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(8800);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(6);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(1200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.name).to.be.a(\"string\");",
											"  pm.expect(jsonData.weight).to.be.a(\"number\");",
											"  pm.expect(jsonData.gender).to.be.a(\"string\");",
											"  pm.expect(jsonData.species).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Dinosaur match\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Dino Test Bebe\");",
											"    pm.expect(jsonData.weight).to.eql(1);",
											"    pm.expect(jsonData.gender).to.be.oneOf([\"f\",\"m\"]);",
											"    pm.expect(jsonData.species).to.eql(\"Ankylosaurus\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "Dino Test Bebe"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(200);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(489);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(18198);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(11);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(1802);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(300);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(734);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(27597);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(16);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(2403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Example Bebe Simple Eat",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Mother",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Mother\",\n  \"weight\": 1,\n  \"gender\": \"f\",\n  \"species\": \"Ankylosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Father",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Father\",\n  \"weight\": 1,\n  \"gender\": \"m\",\n  \"species\": \"Ankylosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Bebe\",\n  \"fatherName\": \"Dino Test Father\",\n  \"motherName\": \"Dino Test Mother\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/breed",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"breed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(248);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(9996);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(2);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(4);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.name).to.be.a(\"string\");",
											"  pm.expect(jsonData.weight).to.be.a(\"number\");",
											"  pm.expect(jsonData.gender).to.be.a(\"string\");",
											"  pm.expect(jsonData.species).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Dinosaur match\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Dino Test Bebe\");",
											"    pm.expect(jsonData.weight).to.eql(1);",
											"    pm.expect(jsonData.gender).to.be.oneOf([\"f\",\"m\"]);",
											"    pm.expect(jsonData.species).to.eql(\"Ankylosaurus\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "Dino Test Bebe"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(200);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(495);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(19992);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(5);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(8);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(300);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(742);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(29989);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(8);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(11);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Example Bebe Survive, if Father die",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Big Mother",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Mother\",\n  \"weight\": 100000,\n  \"gender\": \"f\",\n  \"species\": \"Ankylosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Father",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Father\",\n  \"weight\": 1,\n  \"gender\": \"m\",\n  \"species\": \"Ankylosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"qtyBurger\": 0,\n  \"qtySalad\": 251,\n  \"qtyWater\": 110002\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(501);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(120002);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"qtyBurger\": 0,\n  \"qtySalad\": 1,\n  \"qtyWater\": 110002\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Bebe\",\n  \"fatherName\": \"Dino Test Father\",\n  \"motherName\": \"Dino Test Mother\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/breed",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"breed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"qtyBurger\": 0,\n  \"qtySalad\": 1,\n  \"qtyWater\": 50002\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(200);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(753);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(180005);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(300);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(1004);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(240006);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Example Bebe Survive, if Mother die",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Big Father",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Father\",\n  \"weight\": 100000,\n  \"gender\": \"m\",\n  \"species\": \"Ankylosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Mother",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Mother\",\n  \"weight\": 1,\n  \"gender\": \"f\",\n  \"species\": \"Ankylosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"qtyBurger\": 0,\n  \"qtySalad\": 251,\n  \"qtyWater\": 110002\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(501);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(120002);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"qtyBurger\": 0,\n  \"qtySalad\": 251,\n  \"qtyWater\": 110002\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Bebe\",\n  \"fatherName\": \"Dino Test Father\",\n  \"motherName\": \"Dino Test Mother\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/breed",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"breed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(752);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(180004);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.name).to.be.a(\"string\");",
											"  pm.expect(jsonData.weight).to.be.a(\"number\");",
											"  pm.expect(jsonData.gender).to.be.a(\"string\");",
											"  pm.expect(jsonData.species).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Dinosaur match\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Dino Test Bebe\");",
											"    pm.expect(jsonData.weight).to.eql(1);",
											"    pm.expect(jsonData.gender).to.be.oneOf([\"f\",\"m\"]);",
											"    pm.expect(jsonData.species).to.eql(\"Ankylosaurus\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "Dino Test Bebe"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(300);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(1002);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(190004);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Example Bebe Die",
			"item": [
				{
					"name": "Example Parents die, Bebe die",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Father",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Father\",\n  \"weight\": 1,\n  \"gender\": \"m\",\n  \"species\": \"Ankylosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Mother",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Mother\",\n  \"weight\": 1,\n  \"gender\": \"f\",\n  \"species\": \"Ankylosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(248);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(9996);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(2);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(4);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"qtyBurger\": 0,\n  \"qtySalad\": 0,\n  \"qtyWater\": 50000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Big Dinosaur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Big\",\n  \"weight\": 99400,\n  \"gender\": \"f\",\n  \"species\": \"Brachiosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Bebe\",\n  \"fatherName\": \"Dino Test Father\",\n  \"motherName\": \"Dino Test Mother\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/breed",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"breed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(200);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(9996);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(500);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(119286 );",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.name).to.be.a(\"string\");",
											"  pm.expect(jsonData.weight).to.be.a(\"number\");",
											"  pm.expect(jsonData.gender).to.be.a(\"string\");",
											"  pm.expect(jsonData.species).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Dinosaur match\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Dino Test Bebe\");",
											"    pm.expect(jsonData.weight).to.eql(1);",
											"    pm.expect(jsonData.gender).to.be.oneOf([\"f\",\"m\"]);",
											"    pm.expect(jsonData.species).to.eql(\"Ankylosaurus\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "Dino Test Bebe"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"qtyBurger\": 0,\n  \"qtySalad\": 0,\n  \"qtyWater\": 39644\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(300);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(750);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(178926);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Example Bebe die alone",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Mother",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Mother\",\n  \"weight\": 50000,\n  \"gender\": \"f\",\n  \"species\": \"Ankylosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Father",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Father\",\n  \"weight\": 50000,\n  \"gender\": \"m\",\n  \"species\": \"Ankylosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"qtyBurger\": 0,\n  \"qtySalad\": 250,\n  \"qtyWater\": 110000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(500);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(120000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Bebe\",\n  \"fatherName\": \"Dino Test Father\",\n  \"motherName\": \"Dino Test Mother\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/breed",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"breed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"qtyBurger\": 0,\n  \"qtySalad\": 1,\n  \"qtyWater\": 50002\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.name).to.be.a(\"string\");",
											"  pm.expect(jsonData.weight).to.be.a(\"number\");",
											"  pm.expect(jsonData.gender).to.be.a(\"string\");",
											"  pm.expect(jsonData.species).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Dinosaur match\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Dino Test Bebe\");",
											"    pm.expect(jsonData.weight).to.eql(1);",
											"    pm.expect(jsonData.gender).to.be.oneOf([\"f\",\"m\"]);",
											"    pm.expect(jsonData.species).to.eql(\"Ankylosaurus\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "Dino Test Bebe"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(200);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(1000);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(300000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"qtyBurger\": 0,\n  \"qtySalad\": 0,\n  \"qtyWater\": 50000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(300);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(1250);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(300000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Example Bebe Not Breed",
			"item": [
				{
					"name": "Example Bebe Hybrid, 2 Carni",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Mother",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Mother\",\n  \"weight\": 500,\n  \"gender\": \"f\",\n  \"species\": \"Spinosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Father",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Father\",\n  \"weight\": 500,\n  \"gender\": \"m\",\n  \"species\": \"Megalosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(98);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(250);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(8800);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(2);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(1200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Bebe\",\n  \"fatherName\": \"Dino Test Father\",\n  \"motherName\": \"Dino Test Mother\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/breed",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"breed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.name).to.be.a(\"string\");",
											"  pm.expect(jsonData.weight).to.be.a(\"number\");",
											"  pm.expect(jsonData.gender).to.be.a(\"string\");",
											"  pm.expect(jsonData.species).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Dinosaur match\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Dino Test Bebe\");",
											"    pm.expect(jsonData.weight).to.eql(1);",
											"    pm.expect(jsonData.gender).to.be.oneOf([\"f\",\"m\"]);",
											"    pm.expect(jsonData.species).to.eql(\"Ankylosaurus\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "Dino Test Bebe"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(200);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(489);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(18198);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(11);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(1802);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(300);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(734);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(27597);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(16);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(2403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Example Bebe Hybrid, 2 Herbi",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Mother",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Mother\",\n  \"weight\": 500,\n  \"gender\": \"f\",\n  \"species\": \"Stegosaurus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Father",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Father\",\n  \"weight\": 500,\n  \"gender\": \"m\",\n  \"species\": \"Diplodocus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(100);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(244);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(8800);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(6);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(1200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Bebe\",\n  \"fatherName\": \"Dino Test Father\",\n  \"motherName\": \"Dino Test Mother\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/breed",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"breed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.name).to.be.a(\"string\");",
											"  pm.expect(jsonData.weight).to.be.a(\"number\");",
											"  pm.expect(jsonData.gender).to.be.a(\"string\");",
											"  pm.expect(jsonData.species).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Dinosaur match\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Dino Test Bebe\");",
											"    pm.expect(jsonData.weight).to.eql(1);",
											"    pm.expect(jsonData.gender).to.be.oneOf([\"f\",\"m\"]);",
											"    pm.expect(jsonData.species).to.eql(\"Ankylosaurus\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "Dino Test Bebe"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(200);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(489);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(18198);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(11);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(1802);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(300);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(734);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(27597);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(16);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(2403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Example Bebe Hybrid, Carni + Herbi",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/reset",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Mother",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Mother\",\n  \"weight\": 500,\n  \"gender\": \"f\",\n  \"species\": \"Velociraptor\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dinosaur Father",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Father\",\n  \"weight\": 500,\n  \"gender\": \"m\",\n  \"species\": \"Diplodocus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 1\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(99);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(247);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(8800);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(1);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(3);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(1200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.error).to.be.a(\"string\");",
											"  pm.expect(jsonData.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Should return expected error\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"DUPLICATE_NAME\");",
											"    pm.expect(jsonData.description).to.eql(\"Impossibles to breed these species\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dino Test Bebe\",\n  \"fatherName\": \"Dino Test Father\",\n  \"motherName\": \"Dino Test Mother\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/breed",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"breed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 2\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bebe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.name).to.be.a(\"string\");",
											"  pm.expect(jsonData.weight).to.be.a(\"number\");",
											"  pm.expect(jsonData.gender).to.be.a(\"string\");",
											"  pm.expect(jsonData.species).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Dinosaur match\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Dino Test Bebe\");",
											"    pm.expect(jsonData.weight).to.eql(1);",
											"    pm.expect(jsonData.gender).to.be.oneOf([\"f\",\"m\"]);",
											"    pm.expect(jsonData.species).to.eql(\"Ankylosaurus\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "Dino Test Bebe"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(200);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(489);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(18198);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(11);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(1802);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.turnNumber).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"turnNumber equals to 3\", function () {",
											"    pm.expect(jsonData.turnNumber).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8181/turn",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Resources List, Should have eat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.fresh.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.fresh.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.expired.qtyWater).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyBurger).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtySalad).to.be.a(\"number\");",
											"  pm.expect(jsonData.consumed.qtyWater).to.be.a(\"number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify resources quantities\", function () {",
											"    pm.expect(jsonData.fresh.qtyBurger).to.eql(300);",
											"    pm.expect(jsonData.fresh.qtySalad).to.eql(734);",
											"    pm.expect(jsonData.fresh.qtyWater).to.eql(27597);",
											"",
											"    pm.expect(jsonData.expired.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.expired.qtySalad).to.eql(0);",
											"    pm.expect(jsonData.expired.qtyWater).to.eql(0);",
											"",
											"    pm.expect(jsonData.consumed.qtyBurger).to.eql(0);",
											"    pm.expect(jsonData.consumed.qtySalad).to.eql(16);",
											"    pm.expect(jsonData.consumed.qtyWater).to.eql(2403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/resources",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dinosaur List Recheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Dinosaur quantity match\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:8181/dinosaurs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"dinosaurs"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}